from graphviz import Graph
from Piles_Files import *
from liste_chaine import *

class Arbre_binaire:
    def __init__(self, nom):
        self.nom = nom
        self.fils_gauche = None
        self.fils_droit = None
  
    def liste_aretes(self):
        liste = []
        if self.fils_gauche != None:
            liste.append((str(self.nom), str(self.fils_gauche.nom)))
            liste = liste + self.fils_gauche.liste_aretes()
        if self.fils_droit != None:
            liste.append((str(self.nom), str(self.fils_droit.nom)))
            liste = liste + self.fils_droit.liste_aretes()
        return liste

    def affiche(self):
        graph = Graph()
        liste = self.liste_aretes()
        graph.edges(liste)
        graph.render(view=True, format='png')
    
    def set_fils_gauche(self, arbre):
        self.fils_gauche = arbre
        
    def set_fils_droit(self, arbre):
        self.fils_droit = arbre

def arbre2(n):
    if n<0:
        return None
    abre = Arbre_binaire(0)
    curseur = arbre
    for i in range(1, n+1):
        fils_gauche = Arbre_binaire(i)
        curseur.fils_gauche = fils_gauche
        curseur = curseur.fils_gauche
    return arbre

def arbre3(n):
    if n<0 :
        return None
    arbre = Arbre_binaire(0)
    curseur = arbre
    for i in range(1, n+1):
        fils = Arbre_binaire(i)
        if i % 2 == 0:
            curseur.set_fils_droit(fils)
            curseur = curseur.fils_droit
        else:
            curseur.set_fils_gauche(fils)
            curseur = curseur.fils_gauche
    return arbre.affiche()


def taille(arbre):
    if arbre.fils_gauche is None:
        tg = 0
    else :
        tg = taille(arbre.fils_gauche)
    if arbre.fils_droit is None :
        td = 0
    else :
        td = taille(arbre.fils_droit)
    return tg + td +1


def hauteur(arbre):
    if arbre.fils_gauche is None:
        hg = 0
    else :
        hg = hauteur(arbre.fils_gauche)
    if arbre.fils_droit is None :
        hd = 0
    else :
        hd = hauteur(arbre.fils_droit)
    return max(hg, hd) +1


def parcours_en_largeur(arbre):
    file = File()
    sommets = []
    file.entrer(arbre)
    while not file.vide() :
        noeud = file.sortir()
        print(noeud.nom)
        if noeud.fils_gauche is not None :
            file.entrer(noeud.fils_gauche)
        if noeud.fils_droit is not None :
            file.entrer(noeud.fils_droit)
        sommets.append(noeud.nom)
    return sommets
        

def parcours_en_profondeur_prefixe(arbre):
    liste_sommets = []
    liste_sommets.append(arbre)
    


    

l = Arbre_binaire('l')
h = Arbre_binaire("h")
k = Arbre_binaire("k")
b = Arbre_binaire("b")
e = Arbre_binaire("e")
i = Arbre_binaire("i")
s = Arbre_binaire("s")
o = Arbre_binaire("o")
m = Arbre_binaire("m")
r = Arbre_binaire("r")
v = Arbre_binaire("v")
u = Arbre_binaire("u")
z = Arbre_binaire("z")
l.set_fils_gauche(h)
l.set_fils_droit(s)
h.set_fils_gauche(d)
h.set_fils_droit(k)
d.set_fils_gauche(b)
d.set_fils_droit(e)
k.set_fils_gauche(i)
s.set_fils_gauche(o)
s.set_fils_droit(v)
o.set_fils_gauche(m)
o.set_fils_droit(r)
v.set_fils_gauche(u)
v.set_fils_droit(z)
arbre.affiche()
print(parcours_en_largeur(arbre))
