from graphviz import Graph

class Arbre_binaire:
    def __init__(self, nom):
        self.nom = nom
        self.fg = None
        self.fd = None
  
    def liste_aretes(self):
        liste = []
        if self.fg != None:
            liste.append((str(self.nom), str(self.fg.nom)))
            liste = liste + self.fg.liste_aretes()
        if self.fd != None:
            liste.append((str(self.nom), str(self.fd.nom)))
            liste = liste + self.fd.liste_aretes()
        return liste

    def affiche(self):
        graph = Graph()
        liste = self.liste_aretes()
        graph.edges(liste)
        graph.render(view=True, format='png')
    
    def set_fils_gauche(self, arbre):
        self.fils_gauche = arbre
        
    def set_fils_droit(self, arbre):
        self.fils_droit = arbre
        
    #root = Arbre_binaire('root')
    #a = Arbre_binaire('a')
    #b = Arbre_binaire('b')
    #c = Arbre_binaire('c')
    #d = Arbre_binaire('d')
    #e = Arbre_binaire('e')
    #f = Arbre_binaire('f')
    #g = Arbre_binaire('g')
    #root.set_fils_gauche(a)
    #a.set_fils_gauche(c)
    #a.set_fils_droit(d)
    #root.set_fils_droit(b)
    #b.set_fils_gauche(e)
    ##b.set_fils_droit(f)
    #e.set_fils_gauche(g)
    #root.affiche()

def arbre2(n):t
    if n<0:
        return None
    abre = Arbre_binaire(0)
    curseur = arbre
    for i in range(1, n+1):
        fg = Arbre_binaire(i)
        curseur.fg = fg
        curseur = curseur.fg
    return arbre

def taille(arbre):
    if arbre.fg is None:
        tg = 0
    else :
        tg = taille(arbre.fg)
    if abre.fd is None :
        td = 0
    else :
        td = taille(arbre.fd)
    return tg + td +1