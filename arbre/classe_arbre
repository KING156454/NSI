from graphviz import Graph

class Arbre_binaire:
    def __init__(self, nom):
        self.nom = nom
        self.fils_gauche = None
        self.fils_droit = None
  
    def liste_aretes(self):
        liste = []
        if self.fils_gauche != None:
            liste.append((str(self.nom), str(self.fils_gauche.nom)))
            liste = liste + self.fils_gauche.liste_aretes()
        if self.fils_droit != None:
            liste.append((str(self.nom), str(self.fils_droit.nom)))
            liste = liste + self.fils_droit.liste_aretes()
        return liste

    def affiche(self):
        graph = Graph()
        liste = self.liste_aretes()
        graph.edges(liste)
        graph.render(view=True, format='png')
    
    def set_fils_gauche(self, arbre):
        self.fils_gauche = arbre
        
    def set_fils_droit(self, arbre):
        self.fils_droit = arbre
        
arbre = Arbre_binaire('a')
fg = Arbre_binaire("b")
fd = Arbre_binaire("c")
arbre.set_fils_gauche(fg)
arbre.set_fils_droit(fd)
#arbre.affiche()

def arbre2(n):
    if n<0:
        return None
    abre = Arbre_binaire(0)
    curseur = arbre
    for i in range(1, n+1):
        fils_gauche = Arbre_binaire(i)
        curseur.fils_gauche = fils_gauche
        curseur = curseur.fils_gauche
    return arbre

def arbre3(n):
    if n<0 :
        return None
    arbre = Arbre_binaire(0)
    curseur = arbre
    for i in range(1, n+1):
        fils = Arbre_binaire(i)
        curseur.fils_gauche = fils_gauche
        curseur = curseur.fils_droit
        curseur.fils_droit = fils_droit
        curseur = curseur.fils_gauche


def taille(arbre):
    if arbre.fils_gauche is None:
        tg = 0
    else :
        tg = taille(arbre.fils_gauche)
    if arbre.fils_droit is None :
        td = 0
    else :
        td = taille(arbre.fils_droit)
    return tg + td +1

arbre3(10)